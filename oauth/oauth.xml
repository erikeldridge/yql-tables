<?xml version="1.0" encoding="UTF-8"?>
<table xmlns="http://query.yahooapis.com/v1/schema/table.xsd">
	<meta>
		<author>Erik Eldridge</author>
		<sampleQuery>select * from {table} where uri='http://example.com' and key='asd123' and secret='zxc456';</sampleQuery>
		<!-- ref: http://developer.yahoo.com/yql/guide/yql-execute-examples.html#yql-execute-example-oauth-netflix -->
	</meta>
	<bindings>
		<select itemPath="" produces="XML">
			<inputs>
				<key id="method" type="xs:string" paramType="variable" default="GET"/>
				<key id="uri" type="xs:string" paramType="variable" required="true"/>
				<key id="key" type="xs:string" paramType="variable" required="true"/>
				<key id="secret" type="xs:string" paramType="variable" required="true"/>
				<key id="cback" type="xs:string" paramType="variable"/>
			</inputs>
			<execute><![CDATA[
			
			//kludge: oauth lib depends on document.getElementsByTagName (i know!)
			var document = {
				getElementsByTagName: function() {}
			};

			y.include("http://oauth.googlecode.com/svn/code/javascript/oauth.js");
			y.include("http://oauth.googlecode.com/svn/code/javascript/sha1.js");
			y.include('http://github.com/kvz/phpjs/raw/master/functions/url/parse_url.js');

			var accessor = {
				consumerSecret: secret,
				tokenSecret: ""
			};
			
			var message = {
				action: uri,
				method: method,
				parameters: [
					["oauth_consumer_key", key],
					["oauth_version", "1.0"]]
			};
			
			if ( cback ) {
				message.parameters.push( ["oauth_callback", cback] );
			}
			
			var parsed = parse_url(uri);
			var realm = parsed['scheme'] + '://' + parsed['host']
			OAuth.setTimestampAndNonce(message);
			OAuth.SignatureMethod.sign(message, accessor);
			var req = y.rest(uri).header("Authorization", OAuth.getAuthorizationHeader(realm, message.parameters));

			try {
				switch (method) {
				case 'POST':
					response.object = req.post().response;
					break;
				case 'PUT':
					response.object = req.put().response;
					break;
				case 'DELETE':
					response.object = req.del().response;
					break;
				default:
					response.object = req.get().response;
				}
			} catch(err) {
				response.object = {
					'result': 'failure',
					'error': err
				};
			}

      ]]></execute>
		</select>
	</bindings>
</table>
